import sqlite3

DB_PATH = "insights.db"

def init_db(db_path: str = DB_PATH):
    """Create database schema if it does not exist."""
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()

    # Table for individual interactions
    cur.execute("""
    CREATE TABLE IF NOT EXISTS interactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT,
        question TEXT,
        answer TEXT,
        match_score REAL,
        time TEXT
    )
    """)

    # Table for daily reports
    cur.execute("""
    CREATE TABLE IF NOT EXISTS reports (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT UNIQUE,
        n_logs INTEGER,
        average_match REAL,
        complete_misses INTEGER,
        complete_misses_rate REAL,
        report_text TEXT
    )
    """)

    conn.commit()
    conn.close()


def save_interactions(parsed_email, report_text, db_path: str = DB_PATH):
    """
    Save parsed interactions and the generated daily report into the database.
    parsed_email is the dict from parse_email()
    report_text is the markdown string generated by Ollama
    """
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()

    # Insert each interaction
    for log in parsed_email["logs"]:
        cur.execute("""
            INSERT INTO interactions (date, question, answer, match_score, time, sentiment, language, topic)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            parsed_email["date"],
            log["question"],
            log["answer"],
            float(log["match_score"].replace("%", "")),
            log["time"],
            log.get("sentiment", None),  # placeholder, can extend later
            log.get("language", None),   # placeholder
            log.get("topic", None)       # placeholder
        ))

    # Insert or replace the daily report
    cur.execute("""
        INSERT OR REPLACE INTO reports (date, n_logs, average_match, complete_misses, complete_misses_rate, report_text)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (
        parsed_email["date"],
        parsed_email["n_logs"],
        parsed_email["average_match"],
        parsed_email["complete_misses"],
        parsed_email["complete_misses_rate"],
        report_text
    ))

    conn.commit()
    conn.close()
    print(f"âœ… Saved report and {len(parsed_email['logs'])} interactions for {parsed_email['date']}")
